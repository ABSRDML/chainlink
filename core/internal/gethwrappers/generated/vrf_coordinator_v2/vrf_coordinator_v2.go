// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vrf_coordinator_v2

import (
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

const VRFCoordinatorV2ABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"blockHashStore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkEthFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fastGasFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewServiceAgreement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"output\",\"type\":\"uint256[]\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oldConsumers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newConsumers\",\"type\":\"address[]\"}],\"name\":\"SubscriptionConsumersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFundsWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKHASH_STORE\",\"outputs\":[{\"internalType\":\"contractBlockHashStoreInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FAST_GAS_FEED\",\"outputs\":[{\"internalType\":\"contractAggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_ETH_FEED\",\"outputs\":[{\"internalType\":\"contractAggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESEED_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROOF_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"hashOfKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"publicProvingKey\",\"type\":\"uint256[2]\"}],\"name\":\"registerProvingKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_callbacks\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"consumerIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"numWords\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"seedAndBlockNum\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"s_serviceAgreements\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"s_subscriptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"name\":\"updateSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"subId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

var VRFCoordinatorV2Bin = "0x610100604052600680546001600160401b031916620a000317905560c860075562030d406008553480156200003357600080fd5b5060405162003f2638038062003f268339810160408190526200005691620000e0565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160601b0319606094851b811660805291841b821660a052831b811660c052911b1660e0526200013c565b80516001600160a01b0381168114620000db57600080fd5b919050565b60008060008060808587031215620000f6578384fd5b6200010185620000c3565b93506200011160208601620000c3565b92506200012160408601620000c3565b91506200013160608601620000c3565b905092959194509250565b60805160601c60a05160601c60c05160601c60e05160601c613d7a620001ac6000396000818161038c0152611d710152600081816102cb01526121a2015260008181610472015261226f015260008181610213015281816106a0015281816111ac01526118bb0152613d7a6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80638aa7927b116100e3578063c7e673601161008c578063e911439c11610066578063e911439c146104de578063f2fde38b146104e7578063f3fef3a3146104fa57600080fd5b8063c7e67360146104af578063caf70c4a146104b8578063ced10f8f146104cb57600080fd5b8063ad178361116100bd578063ad1783611461046d578063b415f4f514610494578063b8e5b8b21461049c57600080fd5b80638aa7927b1461041c5780638da5cb5b146104245780638f32d59b1461044257600080fd5b806348baa1c5116101455780636f64f03f1161011f5780636f64f03f146103d657806375f3a14e146103e95780637f0857e21461040957600080fd5b806348baa1c5146102ed578063689c4517146103875780636b9f7d38146103ae57600080fd5b80632feb25c0116101765780632feb25c014610290578063311ee9d7146102a55780634584a419146102c657600080fd5b80630b9110b51461019d5780631b6b6d231461020e5780632af6413e1461025a575b600080fd5b6101dd6101ab3660046137f6565b6001602052600090815260409020805460029091015473ffffffffffffffffffffffffffffffffffffffff9091169082565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152015b60405180910390f35b6102357f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610205565b6102356102683660046136be565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6102a361029e36600461389a565b61050d565b005b6102b86102b33660046136ee565b610791565b604051908152602001610205565b6102357f000000000000000000000000000000000000000000000000000000000000000081565b61034a6102fb3660046136be565b6005602052600090815260409020805460019091015461ffff8083169263ffffffff62010000820481169366010000000000008304909116926a01000000000000000000009092049091169085565b60405161020595949392919061ffff958616815263ffffffff94851660208201529290931660408301529092166060830152608082015260a00190565b6102357f000000000000000000000000000000000000000000000000000000000000000081565b6103c16103bc36600461353f565b610c24565b60405163ffffffff9091168152602001610205565b6102a36103e43660046134da565b610e0f565b6102b86103f73660046134b7565b60036020526000908152604090205481565b6102a3610417366004613810565b610ff8565b6102b8602081565b60005473ffffffffffffffffffffffffffffffffffffffff16610235565b60005473ffffffffffffffffffffffffffffffffffffffff1633146040519015158152602001610205565b6102357f000000000000000000000000000000000000000000000000000000000000000081565b6102b860e081565b6102a36104aa36600461374b565b611286565b6102b861271081565b6102b86104c636600461357a565b6115e7565b6102a36104d936600461384e565b611617565b6102b86101a081565b6102a36104f53660046134b7565b6117b4565b6102a3610508366004613514565b611841565b63ffffffff821660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff166105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f737562494420646f65736e74206578697374000000000000000000000000000060448201526064015b60405180910390fd5b63ffffffff821660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff163314610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f6f6e6c7920737562736372697074696f6e206f776e65722063616e2066756e64604482015260640161059b565b63ffffffff821660009081526001602052604081206002018054918391906106608385613bb5565b90915550506040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd90606401602060405180830381600087803b1580156106f957600080fd5b505af115801561070d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610731919061369e565b5063ffffffff8316600081815260016020908152604091829020600201548251938452908301849052908201527faed0c4817271814c0263a452bb03a7ed73942a2babcfcc9bf1118ef6e264b84b906060015b60405180910390a1505050565b63ffffffff841660009081526001602052604081205473ffffffffffffffffffffffffffffffffffffffff16610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c696420737562496400000000000000000000000000000000000000604482015260640161059b565b60008060005b63ffffffff88166000908152600160208190526040909120015461ffff821610156108ed5763ffffffff8816600090815260016020819052604090912001805433919061ffff84169081106108a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156108db57600192508091506108ed565b806108e581613c35565b915050610829565b5081610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f696e76616c696420636f6e73756d657200000000000000000000000000000000604482015260640161059b565b60008881526002602052604090205473ffffffffffffffffffffffffffffffffffffffff166109e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6d75737420626520612072656769737465726564206b65790000000000000000604482015260640161059b565b6000888152600460209081526040808320338452909152812054610a05906001613bb5565b60008a81526004602090815260408083203380855290835281842085905581519283018e9052908201526060810183905291925090608001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160209182012060a08401835261ffff808816855263ffffffff808f16868501528c16858501528a16606085015291519193506080830191610abb918591439101918252602082015260400190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152918152815160209283012090925260008481526005825282902083518154858401518686015160608089015161ffff9586167fffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000909516949094176201000063ffffffff94851602177fffffffffffffffffffffffffffffffffffffffff000000000000ffffffffffff166601000000000000928416929092027fffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffffff16919091176a0100000000000000000000938516939093029290921784556080968701516001909401939093558451918e1682528c8316938201939093529283018590528c16908201528b917f87c29e55cfe3ed0fe108d605d761353c67ac92357df8d91f6deaaea119879dfc910160405180910390a29998505050505050505050565b600654815160009162010000900461ffff161015610c9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f61626f7665206d617820636f6e73756d65727320706572207375620000000000604482015260640161059b565b610ca78261196e565b6000805474010000000000000000000000000000000000000000900463ffffffff16906014610cd583613c90565b82546101009290920a63ffffffff818102199093169183160217909155604080516060810182523381526020808201878152600083850181905280547401000000000000000000000000000000000000000090049095168552600180835293909420825181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617815593518051929550610d8e9385019291019061327f565b50604082015181600201559050507f2f19b198a9885602de1aaf39f8c94c0f34ad46283893019a4e4b7a63a64d7e7e600060149054906101000a900463ffffffff163384604051610de193929190613a9b565b60405180910390a1505060005474010000000000000000000000000000000000000000900463ffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161059b565b604080518082018252600091610ebf9190849060029083908390808284376000920191909152506115e7915050565b60008181526002602052604090205490915073ffffffffffffffffffffffffffffffffffffffff1615610f74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f63616e6e6f742072652d7265676973746572207468652073616d652070726f7660448201527f696e67206b657900000000000000000000000000000000000000000000000000606482015260840161059b565b60008181526002602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87169081179091558251848152918201527f63c053a28c18ff66ff398bee99746d0480675d15d8d7ee489bcf49217db3c7a29101610784565b63ffffffff831660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1633146110b1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f6e6c7920737562736372697074696f6e206f776e65722063616e207769746860448201527f6472617700000000000000000000000000000000000000000000000000000000606482015260840161059b565b63ffffffff8316600090815260016020526040902060020154811115611133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f696e73756666696369656e742062616c616e6365000000000000000000000000604482015260640161059b565b63ffffffff8316600090815260016020526040812060020180549183919061115b8385613c1e565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156111f057600080fd5b505af1158015611204573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611228919061369e565b5063ffffffff841660008181526001602090815260409182902060020154825193845290830184905282820152517ff153d990f6104950c0703adce9d336c7375e67932780be8ee66ca14dbf77e2e29181900360600190a150505050565b60005a905060008060008061129a86611b01565b93509350935093506000836060015161ffff1667ffffffffffffffff8111156112ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611315578160200160208202803683370190505b50905060005b846060015161ffff168110156113ae5760408051602081018590529081018290526060016040516020818303038152906040528051906020012060001c828281518110611391577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152806113a681613c57565b91505061131b565b5060008381526005602052604080822080547fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001681556001019190915584015163ffffffff165a1161145c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f6e6f7420656e6f7567682067617320666f7220636f6e73756d65720000000000604482015260640161059b565b60007f59e83813d002db2f8acf1e5d18bf70f1515bbf0054df21ee430e8383cc202dbe8483604051602401611492929190613a4e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050600061151f88612710611eb5565b90508060016000886020015163ffffffff1663ffffffff16815260200190815260200160002060020160008282546115579190613c1e565b909155505060008781526002602090815260408083205473ffffffffffffffffffffffffffffffffffffffff16835260039091528120805483929061159d908490613bb5565b90915550506040517ff45ee76115b0ed5f4ebe293254449fbe612bad36a53d52b87b6a40687adc48de906115d49087908690613a4e565b60405180910390a1505050505050505050565b6000816040516020016115fa9190613971565b604051602081830303815290604052805190602001209050919050565b63ffffffff821660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1633146116d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f6f6e6c7920737562736372697074696f6e206f776e65722063616e207570646160448201527f7465000000000000000000000000000000000000000000000000000000000000606482015260840161059b565b6116da8161196e565b63ffffffff821660009081526001602081815260408084209092018054835181840281018401909452808452909183018282801561174e57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611723575b50505063ffffffff8616600090815260016020818152604090922087519596506117809591019350908601915061327f565b507f503839248d4239ce3d46495be3ccbc1db92075a6f82af2b865aa40b1637b83b983828460405161078493929190613adf565b60005473ffffffffffffffffffffffffffffffffffffffff163314611835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161059b565b61183e81611f0e565b50565b3360009081526003602052604090205461185c908290613c1e565b336000908152600360205260409081902091909155517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b1580156118ff57600080fd5b505af1158015611913573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611937919061369e565b61196a577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b5050565b60065481516201000090910461ffff1610156119e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f61626f7665206d617820636f6e73756d65727320706572207375620000000000604482015260640161059b565b60005b815181101561196a57600073ffffffffffffffffffffffffffffffffffffffff16828281518110611a43577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611aef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f636f6e73756d65722061646472657373206d757374206e6f74206265207a657260448201527f6f00000000000000000000000000000000000000000000000000000000000000606482015260840161059b565b80611af981613c57565b9150506119e9565b6040805160a081018252600080825260208201819052918101829052606081018290526080810182905260008080611b3c6101a06020613bb5565b905080865114611ba8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f77726f6e672070726f6f66206c656e6774680000000000000000000000000000604482015260640161059b565b611bb0613309565b5060e086015181870151602088019190611bc9836115e7565b600083815260056020908152604091829020825160a081018452815461ffff80821680845263ffffffff62010000840481169685019690965266010000000000008304909516958301959095526a01000000000000000000009004909316606084015260010154608083015291995097509195508591611ca5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6e6f20636f72726573706f6e64696e6720726571756573740000000000000000604482015260640161059b565b604080516020810184905290810182905260600160405160208183030381529060405280519060200120876080015114611d3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f77726f6e672070726553656564206f7220626c6f636b206e756d000000000000604482015260640161059b565b804080611e69576040517fe9413d38000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e9413d389060240160206040518083038186803b158015611dc857600080fd5b505afa158015611ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0091906136d6565b905080611e69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f706c656173652070726f766520626c6f636b6861736800000000000000000000604482015260640161059b565b6040805160208082018690528183018490528251808303840181526060909201909252805191012060e08b018190526101a08b52611ea68b61203e565b96505050505050509193509193565b6000806000611ec2612174565b9092509050805a611ed38787613bb5565b611edd9190613c1e565b611eef84670de0b6b3a7640000613be1565b611ef99190613be1565b611f039190613bcd565b925050505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116611fb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161059b565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006101a08251146120ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f77726f6e672070726f6f66206c656e6774680000000000000000000000000000604482015260640161059b565b6120b4613309565b6120bc613309565b6120c4613327565b60006120ce613309565b6120d6613309565b6000888060200190518101906120ec91906135d3565b845160208601516040870151989f50969d50949b509299509097509550935061211d928a928a929189898989612345565b600386604051602001612131929190613a16565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209998505050505050505050565b6000806000600660049054906101000a900463ffffffff1690506000808263ffffffff1611905060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561220657600080fd5b505afa15801561221a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223e91906138b5565b50955090935085915050801561226257506122598342613c1e565b8563ffffffff16105b1561226d5760075491505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156122d357600080fd5b505afa1580156122e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230b91906138b5565b50955090925085915050801561232f57506123268342613c1e565b8563ffffffff16105b1561233957506008545b90969095509350505050565b61234e8961261c565b6123b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7075626c6963206b6579206973206e6f74206f6e206375727665000000000000604482015260640161059b565b6123bd8861261c565b612423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f67616d6d61206973206e6f74206f6e2063757276650000000000000000000000604482015260640161059b565b61242c8361261c565b612492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6347616d6d615769746e657373206973206e6f74206f6e206375727665000000604482015260640161059b565b61249b8261261c565b612501576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f73486173685769746e657373206973206e6f74206f6e20637572766500000000604482015260640161059b565b61250d878a8887612660565b612573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6164647228632a706b2b732a6729213d5f755769746e65737300000000000000604482015260640161059b565b600061257f8a87612834565b90506000612592898b878b868989612898565b905060006125a3838d8d8a86612a7b565b9050808a1461260e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c69642070726f6f6600000000000000000000000000000000000000604482015260640161059b565b505050505050505050505050565b60208101516000907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f9080096126598360005b6020020151612ad9565b1492915050565b600073ffffffffffffffffffffffffffffffffffffffff82166126df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f626164207769746e657373000000000000000000000000000000000000000000604482015260640161059b565b60208401516000906126f390600290613caa565b156126ff57601c612702565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418587600060200201510961275b907ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141613c1e565b86519091506000907ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414190890987516040805160008082526020820180845287905260ff88169282019290925260608101929092526080820183905291925060019060a0016020604051602081039080840390855afa1580156127e1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015173ffffffffffffffffffffffffffffffffffffffff9081169088161495505050505050949350505050565b61283c613309565b61286960018484604051602001612855939291906139f5565b604051602081830303815290604052612b31565b90505b6128758161261c565b611f085780516040805160208101929092526128919101612855565b905061286c565b6128a0613309565b82518651036128cf7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f82613caa565b612935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f706f696e747320696e2073756d206d7573742062652064697374696e63740000604482015260640161059b565b612940888a89612bac565b6129cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4669727374206d756c7469706c69636174696f6e20636865636b206661696c6560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161059b565b6129d7858786612bac565b612a63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f5365636f6e64206d756c7469706c69636174696f6e20636865636b206661696c60448201527f6564000000000000000000000000000000000000000000000000000000000000606482015260840161059b565b612a6e878585612cd8565b9998505050505050505050565b600060028686868587604051602001612a9996959493929190613983565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209695505050505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80848509840990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f600782089392505050565b612b39613309565b612b4282612e2e565b8152612b57612b5282600061264f565b612e83565b60208201819052612b6a90600290613caa565b60011415612ba7576020810151612ba1907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f613c1e565b60208201525b919050565b600082612bb857600080fd5b83516020850151600090612bce90600290613caa565b15612bda57601c612bdd565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418387096040805160008082526020820180845281905260ff86169282019290925260608101869052608081018390529192509060019060a0016020604051602081039080840390855afa158015612c5d573d6000803e3d6000fd5b5050506020604051035190506000606087604051602001612c7e9190613971565b60405160208183030381529060405280519060200120901b60601c90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614955050505050509392505050565b612ce0613309565b835160208086015185519186015160009384938493612d0193909190612ebd565b919450925090507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f858209600114612d95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f696e765a206d75737420626520696e7665727365206f66207a00000000000000604482015260640161059b565b60405180604001604052807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612df5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b87860981526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8785099052979650505050505050565b805160208201205b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8110612ba757604080516020808201939093528151808203840181529082019091528051910120612e36565b6000611f08826002612eb67ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f6001613bb5565b901c613061565b60008080600180827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f612f108a7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f613c1e565b8808905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f612f618c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f613c1e565b8a0890506000612f7383838585613155565b9098509050612f8488828e886131ad565b9098509050612f9588828c876131ad565b90985090506000612fa88d878b856131ad565b9098509050612fb988828686613155565b9098509050612fca88828e896131ad565b909850905081811461304d577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f818a0998507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f82890997507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8183099650613051565b8196505b5050505050509450945094915050565b60008061306c613345565b6020808252818101819052604082015260608101859052608081018490527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f60a08201526130b8613363565b60208160c08460057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa92508261314b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6269674d6f64457870206661696c757265210000000000000000000000000000604482015260640161059b565b5195945050505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8487097ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8487099097909650945050505050565b600080807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f878509905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f87613225887ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f613c1e565b0990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8183087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f86890990999098509650505050505050565b8280548282559060005260206000209081019282156132f9579160200282015b828111156132f957825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061329f565b50613305929150613381565b5090565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b5b808211156133055760008155600101613382565b600082601f8301126133a6578081fd5b8135602067ffffffffffffffff8211156133c2576133c2613d1c565b8160051b6133d1828201613b66565b8381528281019086840183880185018910156133eb578687fd5b8693505b8584101561341657803561340281613d4b565b8352600193909301929184019184016133ef565b50979650505050505050565b600082601f830112613432578081fd5b61343a613b1a565b80838560408601111561344b578384fd5b835b600281101561346c57815184526020938401939091019060010161344d565b509095945050505050565b803561ffff81168114612ba757600080fd5b803563ffffffff81168114612ba757600080fd5b805169ffffffffffffffffffff81168114612ba757600080fd5b6000602082840312156134c8578081fd5b81356134d381613d4b565b9392505050565b600080606083850312156134ec578081fd5b82356134f781613d4b565b915060608301841015613508578081fd5b50926020919091019150565b60008060408385031215613526578182fd5b823561353181613d4b565b946020939093013593505050565b600060208284031215613550578081fd5b813567ffffffffffffffff811115613566578182fd5b61357284828501613396565b949350505050565b60006040828403121561358b578081fd5b82601f830112613599578081fd5b6135a1613b1a565b8083856040860111156135b2578384fd5b835b600281101561346c5781358452602093840193909101906001016135b4565b60008060008060008060006101a0888a0312156135ee578283fd5b6135f88989613422565b96506136078960408a01613422565b955088609f890112613617578283fd5b61361f613b43565b8060808a0160e08b018c811115613634578687fd5b865b6003811015613655578251855260209485019490920191600101613636565b5051919750909150613668905081613d4b565b9350613678896101008a01613422565b9250613688896101408a01613422565b9150610180880151905092959891949750929550565b6000602082840312156136af578081fd5b815180151581146134d3578182fd5b6000602082840312156136cf578081fd5b5035919050565b6000602082840312156136e7578081fd5b5051919050565b600080600080600060a08688031215613705578283fd5b8535945061371560208701613489565b935061372360408701613477565b925061373160608701613489565b915061373f60808701613477565b90509295509295909350565b6000602080838503121561375d578182fd5b823567ffffffffffffffff80821115613774578384fd5b818501915085601f830112613787578384fd5b81358181111561379957613799613d1c565b6137c9847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613b66565b915080825286848285010111156137de578485fd5b80848401858401378101909201929092529392505050565b600060208284031215613807578081fd5b6134d382613489565b600080600060608486031215613824578081fd5b61382d84613489565b9250602084013561383d81613d4b565b929592945050506040919091013590565b60008060408385031215613860578182fd5b61386983613489565b9150602083013567ffffffffffffffff811115613884578182fd5b61389085828601613396565b9150509250929050565b600080604083850312156138ac578182fd5b61353183613489565b600080600080600060a086880312156138cc578283fd5b6138d58661349d565b945060208601519350604086015192506060860151915061373f6080870161349d565b6000815180845260208085019450808401835b8381101561393d57815173ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161390b565b509495945050505050565b8060005b600281101561396b57815184526020938401939091019060010161394c565b50505050565b61397b8183613948565b604001919050565b8681526139936020820187613948565b6139a06060820186613948565b6139ad60a0820185613948565b6139ba60e0820184613948565b60609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166101208201526101340195945050505050565b838152613a056020820184613948565b606081019190915260800192915050565b8281526060810160208083018460005b6002811015613a4357815183529183019190830190600101613a26565b505050509392505050565b60006040820184835260206040818501528185518084526060860191508287019350845b81811015613a8e57845183529383019391830191600101613a72565b5090979650505050505050565b63ffffffff8416815273ffffffffffffffffffffffffffffffffffffffff83166020820152606060408201526000613ad660608301846138f8565b95945050505050565b63ffffffff84168152606060208201526000613afe60608301856138f8565b8281036040840152613b1081856138f8565b9695505050505050565b6040805190810167ffffffffffffffff81118282101715613b3d57613b3d613d1c565b60405290565b6040516060810167ffffffffffffffff81118282101715613b3d57613b3d613d1c565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613bad57613bad613d1c565b604052919050565b60008219821115613bc857613bc8613cbe565b500190565b600082613bdc57613bdc613ced565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613c1957613c19613cbe565b500290565b600082821015613c3057613c30613cbe565b500390565b600061ffff80831681811415613c4d57613c4d613cbe565b6001019392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613c8957613c89613cbe565b5060010190565b600063ffffffff80831681811415613c4d57613c4d613cbe565b600082613cb957613cb9613ced565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461183e57600080fdfea164736f6c6343000804000a"

func DeployVRFCoordinatorV2(auth *bind.TransactOpts, backend bind.ContractBackend, link common.Address, blockHashStore common.Address, linkEthFeed common.Address, fastGasFeed common.Address) (common.Address, *types.Transaction, *VRFCoordinatorV2, error) {
	parsed, err := abi.JSON(strings.NewReader(VRFCoordinatorV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VRFCoordinatorV2Bin), backend, link, blockHashStore, linkEthFeed, fastGasFeed)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VRFCoordinatorV2{VRFCoordinatorV2Caller: VRFCoordinatorV2Caller{contract: contract}, VRFCoordinatorV2Transactor: VRFCoordinatorV2Transactor{contract: contract}, VRFCoordinatorV2Filterer: VRFCoordinatorV2Filterer{contract: contract}}, nil
}

type VRFCoordinatorV2 struct {
	address common.Address
	abi     abi.ABI
	VRFCoordinatorV2Caller
	VRFCoordinatorV2Transactor
	VRFCoordinatorV2Filterer
}

type VRFCoordinatorV2Caller struct {
	contract *bind.BoundContract
}

type VRFCoordinatorV2Transactor struct {
	contract *bind.BoundContract
}

type VRFCoordinatorV2Filterer struct {
	contract *bind.BoundContract
}

type VRFCoordinatorV2Session struct {
	Contract     *VRFCoordinatorV2
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type VRFCoordinatorV2CallerSession struct {
	Contract *VRFCoordinatorV2Caller
	CallOpts bind.CallOpts
}

type VRFCoordinatorV2TransactorSession struct {
	Contract     *VRFCoordinatorV2Transactor
	TransactOpts bind.TransactOpts
}

type VRFCoordinatorV2Raw struct {
	Contract *VRFCoordinatorV2
}

type VRFCoordinatorV2CallerRaw struct {
	Contract *VRFCoordinatorV2Caller
}

type VRFCoordinatorV2TransactorRaw struct {
	Contract *VRFCoordinatorV2Transactor
}

func NewVRFCoordinatorV2(address common.Address, backend bind.ContractBackend) (*VRFCoordinatorV2, error) {
	abi, err := abi.JSON(strings.NewReader(VRFCoordinatorV2ABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindVRFCoordinatorV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2{address: address, abi: abi, VRFCoordinatorV2Caller: VRFCoordinatorV2Caller{contract: contract}, VRFCoordinatorV2Transactor: VRFCoordinatorV2Transactor{contract: contract}, VRFCoordinatorV2Filterer: VRFCoordinatorV2Filterer{contract: contract}}, nil
}

func NewVRFCoordinatorV2Caller(address common.Address, caller bind.ContractCaller) (*VRFCoordinatorV2Caller, error) {
	contract, err := bindVRFCoordinatorV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2Caller{contract: contract}, nil
}

func NewVRFCoordinatorV2Transactor(address common.Address, transactor bind.ContractTransactor) (*VRFCoordinatorV2Transactor, error) {
	contract, err := bindVRFCoordinatorV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2Transactor{contract: contract}, nil
}

func NewVRFCoordinatorV2Filterer(address common.Address, filterer bind.ContractFilterer) (*VRFCoordinatorV2Filterer, error) {
	contract, err := bindVRFCoordinatorV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2Filterer{contract: contract}, nil
}

func bindVRFCoordinatorV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VRFCoordinatorV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VRFCoordinatorV2.Contract.VRFCoordinatorV2Caller.contract.Call(opts, result, method, params...)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.VRFCoordinatorV2Transactor.contract.Transfer(opts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.VRFCoordinatorV2Transactor.contract.Transact(opts, method, params...)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VRFCoordinatorV2.Contract.contract.Call(opts, result, method, params...)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.contract.Transfer(opts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.contract.Transact(opts, method, params...)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) BLOCKHASHSTORE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "BLOCKHASH_STORE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) BLOCKHASHSTORE() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.BLOCKHASHSTORE(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) BLOCKHASHSTORE() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.BLOCKHASHSTORE(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) FASTGASFEED(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "FAST_GAS_FEED")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) FASTGASFEED() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.FASTGASFEED(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) FASTGASFEED() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.FASTGASFEED(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) GASBUFFER(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "GAS_BUFFER")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) GASBUFFER() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.GASBUFFER(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) GASBUFFER() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.GASBUFFER(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) LINK(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "LINK")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) LINK() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.LINK(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) LINK() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.LINK(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) LINKETHFEED(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "LINK_ETH_FEED")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) LINKETHFEED() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.LINKETHFEED(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) LINKETHFEED() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.LINKETHFEED(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) PRESEEDOFFSET(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "PRESEED_OFFSET")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) PRESEEDOFFSET() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PRESEEDOFFSET(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) PRESEEDOFFSET() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PRESEEDOFFSET(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) PROOFLENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "PROOF_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) PROOFLENGTH() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PROOFLENGTH(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) PROOFLENGTH() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PROOFLENGTH(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) PUBLICKEYOFFSET(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "PUBLIC_KEY_OFFSET")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) PUBLICKEYOFFSET() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PUBLICKEYOFFSET(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) PUBLICKEYOFFSET() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PUBLICKEYOFFSET(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) HashOfKey(opts *bind.CallOpts, _publicKey [2]*big.Int) ([32]byte, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "hashOfKey", _publicKey)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) HashOfKey(_publicKey [2]*big.Int) ([32]byte, error) {
	return _VRFCoordinatorV2.Contract.HashOfKey(&_VRFCoordinatorV2.CallOpts, _publicKey)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) HashOfKey(_publicKey [2]*big.Int) ([32]byte, error) {
	return _VRFCoordinatorV2.Contract.HashOfKey(&_VRFCoordinatorV2.CallOpts, _publicKey)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "isOwner")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) IsOwner() (bool, error) {
	return _VRFCoordinatorV2.Contract.IsOwner(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) IsOwner() (bool, error) {
	return _VRFCoordinatorV2.Contract.IsOwner(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) Owner() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.Owner(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) Owner() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.Owner(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) SCallbacks(opts *bind.CallOpts, arg0 *big.Int) (SCallbacks,

	error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "s_callbacks", arg0)

	outstruct := new(SCallbacks)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConsumerIndex = *abi.ConvertType(out[0], new(uint16)).(*uint16)
	outstruct.SubId = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.CallbackGasLimit = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.NumWords = *abi.ConvertType(out[3], new(uint16)).(*uint16)
	outstruct.SeedAndBlockNum = *abi.ConvertType(out[4], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) SCallbacks(arg0 *big.Int) (SCallbacks,

	error) {
	return _VRFCoordinatorV2.Contract.SCallbacks(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) SCallbacks(arg0 *big.Int) (SCallbacks,

	error) {
	return _VRFCoordinatorV2.Contract.SCallbacks(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) SServiceAgreements(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "s_serviceAgreements", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) SServiceAgreements(arg0 [32]byte) (common.Address, error) {
	return _VRFCoordinatorV2.Contract.SServiceAgreements(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) SServiceAgreements(arg0 [32]byte) (common.Address, error) {
	return _VRFCoordinatorV2.Contract.SServiceAgreements(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) SSubscriptions(opts *bind.CallOpts, arg0 uint32) (SSubscriptions,

	error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "s_subscriptions", arg0)

	outstruct := new(SSubscriptions)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Balance = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) SSubscriptions(arg0 uint32) (SSubscriptions,

	error) {
	return _VRFCoordinatorV2.Contract.SSubscriptions(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) SSubscriptions(arg0 uint32) (SSubscriptions,

	error) {
	return _VRFCoordinatorV2.Contract.SSubscriptions(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) SWithdrawableTokens(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "s_withdrawableTokens", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) SWithdrawableTokens(arg0 common.Address) (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.SWithdrawableTokens(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) SWithdrawableTokens(arg0 common.Address) (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.SWithdrawableTokens(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) CreateSubscription(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "createSubscription", consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) CreateSubscription(consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.CreateSubscription(&_VRFCoordinatorV2.TransactOpts, consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) CreateSubscription(consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.CreateSubscription(&_VRFCoordinatorV2.TransactOpts, consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) FulfillRandomWords(opts *bind.TransactOpts, _proof []byte) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "fulfillRandomWords", _proof)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) FulfillRandomWords(_proof []byte) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.FulfillRandomWords(&_VRFCoordinatorV2.TransactOpts, _proof)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) FulfillRandomWords(_proof []byte) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.FulfillRandomWords(&_VRFCoordinatorV2.TransactOpts, _proof)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) FundSubscription(opts *bind.TransactOpts, subId uint32, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "fundSubscription", subId, amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) FundSubscription(subId uint32, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.FundSubscription(&_VRFCoordinatorV2.TransactOpts, subId, amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) FundSubscription(subId uint32, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.FundSubscription(&_VRFCoordinatorV2.TransactOpts, subId, amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) RegisterProvingKey(opts *bind.TransactOpts, oracle common.Address, publicProvingKey [2]*big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "registerProvingKey", oracle, publicProvingKey)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) RegisterProvingKey(oracle common.Address, publicProvingKey [2]*big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.RegisterProvingKey(&_VRFCoordinatorV2.TransactOpts, oracle, publicProvingKey)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) RegisterProvingKey(oracle common.Address, publicProvingKey [2]*big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.RegisterProvingKey(&_VRFCoordinatorV2.TransactOpts, oracle, publicProvingKey)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) RequestRandomWords(opts *bind.TransactOpts, keyHash [32]byte, subId uint32, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint16) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "requestRandomWords", keyHash, subId, minimumRequestConfirmations, callbackGasLimit, numWords)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) RequestRandomWords(keyHash [32]byte, subId uint32, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint16) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.RequestRandomWords(&_VRFCoordinatorV2.TransactOpts, keyHash, subId, minimumRequestConfirmations, callbackGasLimit, numWords)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) RequestRandomWords(keyHash [32]byte, subId uint32, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint16) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.RequestRandomWords(&_VRFCoordinatorV2.TransactOpts, keyHash, subId, minimumRequestConfirmations, callbackGasLimit, numWords)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "transferOwnership", newOwner)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.TransferOwnership(&_VRFCoordinatorV2.TransactOpts, newOwner)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.TransferOwnership(&_VRFCoordinatorV2.TransactOpts, newOwner)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) UpdateSubscription(opts *bind.TransactOpts, subId uint32, consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "updateSubscription", subId, consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) UpdateSubscription(subId uint32, consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.UpdateSubscription(&_VRFCoordinatorV2.TransactOpts, subId, consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) UpdateSubscription(subId uint32, consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.UpdateSubscription(&_VRFCoordinatorV2.TransactOpts, subId, consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) Withdraw(opts *bind.TransactOpts, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "withdraw", _recipient, _amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) Withdraw(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.Withdraw(&_VRFCoordinatorV2.TransactOpts, _recipient, _amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) Withdraw(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.Withdraw(&_VRFCoordinatorV2.TransactOpts, _recipient, _amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) WithdrawFromSubscription(opts *bind.TransactOpts, subId uint32, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "withdrawFromSubscription", subId, to, amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) WithdrawFromSubscription(subId uint32, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.WithdrawFromSubscription(&_VRFCoordinatorV2.TransactOpts, subId, to, amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) WithdrawFromSubscription(subId uint32, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.WithdrawFromSubscription(&_VRFCoordinatorV2.TransactOpts, subId, to, amount)
}

type VRFCoordinatorV2NewServiceAgreementIterator struct {
	Event *VRFCoordinatorV2NewServiceAgreement

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2NewServiceAgreementIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2NewServiceAgreement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2NewServiceAgreement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2NewServiceAgreementIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2NewServiceAgreementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2NewServiceAgreement struct {
	KeyHash [32]byte
	Oracle  common.Address
	Raw     types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterNewServiceAgreement(opts *bind.FilterOpts) (*VRFCoordinatorV2NewServiceAgreementIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "NewServiceAgreement")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2NewServiceAgreementIterator{contract: _VRFCoordinatorV2.contract, event: "NewServiceAgreement", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchNewServiceAgreement(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2NewServiceAgreement) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "NewServiceAgreement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2NewServiceAgreement)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "NewServiceAgreement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseNewServiceAgreement(log types.Log) (*VRFCoordinatorV2NewServiceAgreement, error) {
	event := new(VRFCoordinatorV2NewServiceAgreement)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "NewServiceAgreement", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2OwnershipTransferredIterator struct {
	Event *VRFCoordinatorV2OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*VRFCoordinatorV2OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2OwnershipTransferredIterator{contract: _VRFCoordinatorV2.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2OwnershipTransferred)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseOwnershipTransferred(log types.Log) (*VRFCoordinatorV2OwnershipTransferred, error) {
	event := new(VRFCoordinatorV2OwnershipTransferred)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2RandomWordsFulfilledIterator struct {
	Event *VRFCoordinatorV2RandomWordsFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2RandomWordsFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2RandomWordsFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2RandomWordsFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2RandomWordsFulfilledIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2RandomWordsFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2RandomWordsFulfilled struct {
	RequestId *big.Int
	Output    []*big.Int
	Raw       types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*VRFCoordinatorV2RandomWordsFulfilledIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2RandomWordsFulfilledIterator{contract: _VRFCoordinatorV2.contract, event: "RandomWordsFulfilled", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2RandomWordsFulfilled) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2RandomWordsFulfilled)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseRandomWordsFulfilled(log types.Log) (*VRFCoordinatorV2RandomWordsFulfilled, error) {
	event := new(VRFCoordinatorV2RandomWordsFulfilled)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2RandomWordsRequestedIterator struct {
	Event *VRFCoordinatorV2RandomWordsRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2RandomWordsRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2RandomWordsRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2RandomWordsRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2RandomWordsRequestedIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2RandomWordsRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2RandomWordsRequested struct {
	KeyHash                     [32]byte
	MinimumRequestConfirmations uint16
	CallbackGasLimit            uint32
	PreSeed                     *big.Int
	SubId                       uint32
	Raw                         types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterRandomWordsRequested(opts *bind.FilterOpts, keyHash [][32]byte) (*VRFCoordinatorV2RandomWordsRequestedIterator, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "RandomWordsRequested", keyHashRule)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2RandomWordsRequestedIterator{contract: _VRFCoordinatorV2.contract, event: "RandomWordsRequested", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchRandomWordsRequested(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2RandomWordsRequested, keyHash [][32]byte) (event.Subscription, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "RandomWordsRequested", keyHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2RandomWordsRequested)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseRandomWordsRequested(log types.Log) (*VRFCoordinatorV2RandomWordsRequested, error) {
	event := new(VRFCoordinatorV2RandomWordsRequested)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2SubscriptionCanceledIterator struct {
	Event *VRFCoordinatorV2SubscriptionCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2SubscriptionCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2SubscriptionCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2SubscriptionCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2SubscriptionCanceledIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2SubscriptionCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2SubscriptionCanceled struct {
	SubId uint32
	Raw   types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterSubscriptionCanceled(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionCanceledIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionCanceled")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2SubscriptionCanceledIterator{contract: _VRFCoordinatorV2.contract, event: "SubscriptionCanceled", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionCanceled) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionCanceled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2SubscriptionCanceled)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseSubscriptionCanceled(log types.Log) (*VRFCoordinatorV2SubscriptionCanceled, error) {
	event := new(VRFCoordinatorV2SubscriptionCanceled)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2SubscriptionConsumersUpdatedIterator struct {
	Event *VRFCoordinatorV2SubscriptionConsumersUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2SubscriptionConsumersUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2SubscriptionConsumersUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2SubscriptionConsumersUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2SubscriptionConsumersUpdatedIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2SubscriptionConsumersUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2SubscriptionConsumersUpdated struct {
	SubId        uint32
	OldConsumers []common.Address
	NewConsumers []common.Address
	Raw          types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterSubscriptionConsumersUpdated(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionConsumersUpdatedIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionConsumersUpdated")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2SubscriptionConsumersUpdatedIterator{contract: _VRFCoordinatorV2.contract, event: "SubscriptionConsumersUpdated", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchSubscriptionConsumersUpdated(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionConsumersUpdated) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionConsumersUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2SubscriptionConsumersUpdated)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumersUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseSubscriptionConsumersUpdated(log types.Log) (*VRFCoordinatorV2SubscriptionConsumersUpdated, error) {
	event := new(VRFCoordinatorV2SubscriptionConsumersUpdated)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumersUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2SubscriptionCreatedIterator struct {
	Event *VRFCoordinatorV2SubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2SubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2SubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2SubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2SubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2SubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2SubscriptionCreated struct {
	SubId     uint32
	Owner     common.Address
	Consumers []common.Address
	Raw       types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterSubscriptionCreated(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionCreatedIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionCreated")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2SubscriptionCreatedIterator{contract: _VRFCoordinatorV2.contract, event: "SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionCreated) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2SubscriptionCreated)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseSubscriptionCreated(log types.Log) (*VRFCoordinatorV2SubscriptionCreated, error) {
	event := new(VRFCoordinatorV2SubscriptionCreated)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2SubscriptionFundsAddedIterator struct {
	Event *VRFCoordinatorV2SubscriptionFundsAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2SubscriptionFundsAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2SubscriptionFundsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2SubscriptionFundsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2SubscriptionFundsAddedIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2SubscriptionFundsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2SubscriptionFundsAdded struct {
	SubId      uint32
	OldBalance *big.Int
	NewBalance *big.Int
	Raw        types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterSubscriptionFundsAdded(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionFundsAddedIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionFundsAdded")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2SubscriptionFundsAddedIterator{contract: _VRFCoordinatorV2.contract, event: "SubscriptionFundsAdded", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchSubscriptionFundsAdded(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionFundsAdded) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionFundsAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2SubscriptionFundsAdded)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFundsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseSubscriptionFundsAdded(log types.Log) (*VRFCoordinatorV2SubscriptionFundsAdded, error) {
	event := new(VRFCoordinatorV2SubscriptionFundsAdded)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFundsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2SubscriptionFundsWithdrawnIterator struct {
	Event *VRFCoordinatorV2SubscriptionFundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2SubscriptionFundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2SubscriptionFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2SubscriptionFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2SubscriptionFundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2SubscriptionFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2SubscriptionFundsWithdrawn struct {
	SubId      uint32
	OldBalance *big.Int
	NewBalance *big.Int
	Raw        types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterSubscriptionFundsWithdrawn(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionFundsWithdrawnIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2SubscriptionFundsWithdrawnIterator{contract: _VRFCoordinatorV2.contract, event: "SubscriptionFundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchSubscriptionFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionFundsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2SubscriptionFundsWithdrawn)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseSubscriptionFundsWithdrawn(log types.Log) (*VRFCoordinatorV2SubscriptionFundsWithdrawn, error) {
	event := new(VRFCoordinatorV2SubscriptionFundsWithdrawn)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SCallbacks struct {
	ConsumerIndex    uint16
	SubId            uint32
	CallbackGasLimit uint32
	NumWords         uint16
	SeedAndBlockNum  [32]byte
}
type SSubscriptions struct {
	Owner   common.Address
	Balance *big.Int
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _VRFCoordinatorV2.abi.Events["NewServiceAgreement"].ID:
		return _VRFCoordinatorV2.ParseNewServiceAgreement(log)
	case _VRFCoordinatorV2.abi.Events["OwnershipTransferred"].ID:
		return _VRFCoordinatorV2.ParseOwnershipTransferred(log)
	case _VRFCoordinatorV2.abi.Events["RandomWordsFulfilled"].ID:
		return _VRFCoordinatorV2.ParseRandomWordsFulfilled(log)
	case _VRFCoordinatorV2.abi.Events["RandomWordsRequested"].ID:
		return _VRFCoordinatorV2.ParseRandomWordsRequested(log)
	case _VRFCoordinatorV2.abi.Events["SubscriptionCanceled"].ID:
		return _VRFCoordinatorV2.ParseSubscriptionCanceled(log)
	case _VRFCoordinatorV2.abi.Events["SubscriptionConsumersUpdated"].ID:
		return _VRFCoordinatorV2.ParseSubscriptionConsumersUpdated(log)
	case _VRFCoordinatorV2.abi.Events["SubscriptionCreated"].ID:
		return _VRFCoordinatorV2.ParseSubscriptionCreated(log)
	case _VRFCoordinatorV2.abi.Events["SubscriptionFundsAdded"].ID:
		return _VRFCoordinatorV2.ParseSubscriptionFundsAdded(log)
	case _VRFCoordinatorV2.abi.Events["SubscriptionFundsWithdrawn"].ID:
		return _VRFCoordinatorV2.ParseSubscriptionFundsWithdrawn(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (VRFCoordinatorV2NewServiceAgreement) Topic() common.Hash {
	return common.HexToHash("0x63c053a28c18ff66ff398bee99746d0480675d15d8d7ee489bcf49217db3c7a2")
}

func (VRFCoordinatorV2OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (VRFCoordinatorV2RandomWordsFulfilled) Topic() common.Hash {
	return common.HexToHash("0xf45ee76115b0ed5f4ebe293254449fbe612bad36a53d52b87b6a40687adc48de")
}

func (VRFCoordinatorV2RandomWordsRequested) Topic() common.Hash {
	return common.HexToHash("0x87c29e55cfe3ed0fe108d605d761353c67ac92357df8d91f6deaaea119879dfc")
}

func (VRFCoordinatorV2SubscriptionCanceled) Topic() common.Hash {
	return common.HexToHash("0x4c076fa43917f0d675351fcdaec4f322192f9d7fdc80b99427f97ace7290e0aa")
}

func (VRFCoordinatorV2SubscriptionConsumersUpdated) Topic() common.Hash {
	return common.HexToHash("0x503839248d4239ce3d46495be3ccbc1db92075a6f82af2b865aa40b1637b83b9")
}

func (VRFCoordinatorV2SubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0x2f19b198a9885602de1aaf39f8c94c0f34ad46283893019a4e4b7a63a64d7e7e")
}

func (VRFCoordinatorV2SubscriptionFundsAdded) Topic() common.Hash {
	return common.HexToHash("0xaed0c4817271814c0263a452bb03a7ed73942a2babcfcc9bf1118ef6e264b84b")
}

func (VRFCoordinatorV2SubscriptionFundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0xf153d990f6104950c0703adce9d336c7375e67932780be8ee66ca14dbf77e2e2")
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2) Address() common.Address {
	return _VRFCoordinatorV2.address
}

type VRFCoordinatorV2Interface interface {
	BLOCKHASHSTORE(opts *bind.CallOpts) (common.Address, error)

	FASTGASFEED(opts *bind.CallOpts) (common.Address, error)

	GASBUFFER(opts *bind.CallOpts) (*big.Int, error)

	LINK(opts *bind.CallOpts) (common.Address, error)

	LINKETHFEED(opts *bind.CallOpts) (common.Address, error)

	PRESEEDOFFSET(opts *bind.CallOpts) (*big.Int, error)

	PROOFLENGTH(opts *bind.CallOpts) (*big.Int, error)

	PUBLICKEYOFFSET(opts *bind.CallOpts) (*big.Int, error)

	HashOfKey(opts *bind.CallOpts, _publicKey [2]*big.Int) ([32]byte, error)

	IsOwner(opts *bind.CallOpts) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SCallbacks(opts *bind.CallOpts, arg0 *big.Int) (SCallbacks,

		error)

	SServiceAgreements(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error)

	SSubscriptions(opts *bind.CallOpts, arg0 uint32) (SSubscriptions,

		error)

	SWithdrawableTokens(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error)

	CreateSubscription(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error)

	FulfillRandomWords(opts *bind.TransactOpts, _proof []byte) (*types.Transaction, error)

	FundSubscription(opts *bind.TransactOpts, subId uint32, amount *big.Int) (*types.Transaction, error)

	RegisterProvingKey(opts *bind.TransactOpts, oracle common.Address, publicProvingKey [2]*big.Int) (*types.Transaction, error)

	RequestRandomWords(opts *bind.TransactOpts, keyHash [32]byte, subId uint32, minimumRequestConfirmations uint16, callbackGasLimit uint32, numWords uint16) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	UpdateSubscription(opts *bind.TransactOpts, subId uint32, consumers []common.Address) (*types.Transaction, error)

	Withdraw(opts *bind.TransactOpts, _recipient common.Address, _amount *big.Int) (*types.Transaction, error)

	WithdrawFromSubscription(opts *bind.TransactOpts, subId uint32, to common.Address, amount *big.Int) (*types.Transaction, error)

	FilterNewServiceAgreement(opts *bind.FilterOpts) (*VRFCoordinatorV2NewServiceAgreementIterator, error)

	WatchNewServiceAgreement(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2NewServiceAgreement) (event.Subscription, error)

	ParseNewServiceAgreement(log types.Log) (*VRFCoordinatorV2NewServiceAgreement, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*VRFCoordinatorV2OwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*VRFCoordinatorV2OwnershipTransferred, error)

	FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*VRFCoordinatorV2RandomWordsFulfilledIterator, error)

	WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2RandomWordsFulfilled) (event.Subscription, error)

	ParseRandomWordsFulfilled(log types.Log) (*VRFCoordinatorV2RandomWordsFulfilled, error)

	FilterRandomWordsRequested(opts *bind.FilterOpts, keyHash [][32]byte) (*VRFCoordinatorV2RandomWordsRequestedIterator, error)

	WatchRandomWordsRequested(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2RandomWordsRequested, keyHash [][32]byte) (event.Subscription, error)

	ParseRandomWordsRequested(log types.Log) (*VRFCoordinatorV2RandomWordsRequested, error)

	FilterSubscriptionCanceled(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionCanceledIterator, error)

	WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionCanceled) (event.Subscription, error)

	ParseSubscriptionCanceled(log types.Log) (*VRFCoordinatorV2SubscriptionCanceled, error)

	FilterSubscriptionConsumersUpdated(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionConsumersUpdatedIterator, error)

	WatchSubscriptionConsumersUpdated(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionConsumersUpdated) (event.Subscription, error)

	ParseSubscriptionConsumersUpdated(log types.Log) (*VRFCoordinatorV2SubscriptionConsumersUpdated, error)

	FilterSubscriptionCreated(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionCreatedIterator, error)

	WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionCreated) (event.Subscription, error)

	ParseSubscriptionCreated(log types.Log) (*VRFCoordinatorV2SubscriptionCreated, error)

	FilterSubscriptionFundsAdded(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionFundsAddedIterator, error)

	WatchSubscriptionFundsAdded(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionFundsAdded) (event.Subscription, error)

	ParseSubscriptionFundsAdded(log types.Log) (*VRFCoordinatorV2SubscriptionFundsAdded, error)

	FilterSubscriptionFundsWithdrawn(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionFundsWithdrawnIterator, error)

	WatchSubscriptionFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionFundsWithdrawn) (event.Subscription, error)

	ParseSubscriptionFundsWithdrawn(log types.Log) (*VRFCoordinatorV2SubscriptionFundsWithdrawn, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
