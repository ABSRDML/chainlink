// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vrf_coordinator_v2

import (
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

const VRFCoordinatorV2ABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"blockHashStore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkEthFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fastGasFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewServiceAgreement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"output\",\"type\":\"uint256[]\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"callbackGasLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"numWords\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oldConsumers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newConsumers\",\"type\":\"address[]\"}],\"name\":\"SubscriptionConsumersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"a\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"b\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"c\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"s\",\"type\":\"address\"}],\"name\":\"TestLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKHASH_STORE\",\"outputs\":[{\"internalType\":\"contractBlockHashStoreInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FAST_GAS_FEED\",\"outputs\":[{\"internalType\":\"contractAggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contractLinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_ETH_FEED\",\"outputs\":[{\"internalType\":\"contractAggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESEED_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROOF_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_KEY_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"hashOfKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"publicProvingKey\",\"type\":\"uint256[2]\"}],\"name\":\"registerProvingKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"callbackGasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"numWords\",\"type\":\"uint64\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_callbacks2\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"s_serviceAgreements\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"s_subscriptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"name\":\"updateSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

var VRFCoordinatorV2Bin = "0x610100604052600680546001600160401b031916620a000317905560c860075562030d406008553480156200003357600080fd5b5060405162003f2b38038062003f2b8339810160408190526200005691620000e0565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160601b0319606094851b811660805291841b821660a052831b811660c052911b1660e0526200013c565b80516001600160a01b0381168114620000db57600080fd5b919050565b60008060008060808587031215620000f6578384fd5b6200010185620000c3565b93506200011160208601620000c3565b92506200012160408601620000c3565b91506200013160608601620000c3565b905092959194509250565b60805160601c60a05160601c60c05160601c60e05160601c613d7f620001ac600039600081816102e40152611d4501526000818161023e01526121780152600081816103f801526122450152600081816101b70152818161080e0152818161163e01526118310152613d7f6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80638da5cb5b116100e3578063c7e673601161008c578063e911439c11610066578063e911439c14610464578063f2fde38b1461046d578063f3fef3a31461048057600080fd5b8063c7e6736014610435578063caf70c4a1461043e578063dd2819281461045157600080fd5b8063ad178361116100bd578063ad178361146103f3578063b415f4f51461041a578063b8e5b8b21461042257600080fd5b80638da5cb5b146103975780638f32d59b146103b55780639cb1298b146103e057600080fd5b8063689c45171161014557806375f3a14e1161011f57806375f3a14e146103415780637e3c7ff81461036f5780638aa7927b1461038f57600080fd5b8063689c4517146102df5780636b9f7d38146103065780636f64f03f1461032e57600080fd5b80634584a419116101765780634584a41914610239578063622c6fd3146102605780636840c05e1461027357600080fd5b806315ae7e381461019d5780631b6b6d23146101b25780632af6413e14610203575b600080fd5b6101b06101ab366004613816565b610493565b005b6101d97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101d9610211366004613686565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6101d97f000000000000000000000000000000000000000000000000000000000000000081565b6101b061026e3660046137d8565b61064e565b6102b36102813660046137be565b6001602052600090815260409020805460029091015473ffffffffffffffffffffffffffffffffffffffff9091169082565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101fa565b6101d97f000000000000000000000000000000000000000000000000000000000000000081565b610319610314366004613507565b6108ec565b60405163ffffffff90911681526020016101fa565b6101b061033c3660046134a2565b610ad7565b61036161034f36600461347f565b60036020526000908152604090205481565b6040519081526020016101fa565b61036161037d366004613686565b60056020526000908152604090205481565b610361602081565b60005473ffffffffffffffffffffffffffffffffffffffff166101d9565b60005473ffffffffffffffffffffffffffffffffffffffff16331460405190151581526020016101fa565b6103616103ee3660046136b6565b610cc0565b6101d97f000000000000000000000000000000000000000000000000000000000000000081565b61036160e081565b6101b0610430366004613713565b6110df565b61036161271081565b61036161044c366004613542565b611474565b6101b061045f366004613862565b6114a4565b6103616101a081565b6101b061047b36600461347f565b61172a565b6101b061048e3660046134dc565b6117b7565b67ffffffffffffffff821660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff163314610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f6f6e6c7920737562736372697074696f6e206f776e65722063616e207570646160448201527f746500000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61055f816118e4565b67ffffffffffffffff82166000908152600160208181526040808420909201805483518184028101840190945280845290918301828280156105d757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116105ac575b50505067ffffffffffffffff86166000908152600160208181526040909220875195965061060d95910193509086019150613255565b507f39c69cf33be9b805bfad67e04ec752825baee3e53bde1d72598cdd3163d05f7c83828460405161064193929190613ae0565b60405180910390a1505050565b67ffffffffffffffff831660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff16331461070b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f6e6c7920737562736372697074696f6e206f776e65722063616e207769746860448201527f6472617700000000000000000000000000000000000000000000000000000000606482015260840161054d565b67ffffffffffffffff8316600090815260016020526040902060020154811115610791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f696e73756666696369656e742062616c616e6365000000000000000000000000604482015260640161054d565b67ffffffffffffffff831660009081526001602052604081206002018054918391906107bd8385613c23565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561085257600080fd5b505af1158015610866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088a9190613666565b5067ffffffffffffffff841660008181526001602090815260409182902060020154825193845290830184905282820152517fe335bd1d43104a2151d991ea082e1c5edf621ffe727cc629fef25af0b358818a9181900360600190a150505050565b600654815160009162010000900461ffff161015610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f61626f7665206d617820636f6e73756d65727320706572207375620000000000604482015260640161054d565b61096f826118e4565b6000805474010000000000000000000000000000000000000000900463ffffffff1690601461099d83613c95565b82546101009290920a63ffffffff818102199093169183160217909155604080516060810182523381526020808201878152600083850181905280547401000000000000000000000000000000000000000090049095168552600180835293909420825181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617815593518051929550610a5693850192910190613255565b50604082015181600201559050507fee2c521bbf51f9409a7f8f78efc00452e94cd2cfb510a4cba04d9e21cb0ad29f600060149054906101000a900463ffffffff163384604051610aa993929190613a9c565b60405180910390a1505060005474010000000000000000000000000000000000000000900463ffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054d565b604080518082018252600091610b87919084906002908390839080828437600092019190915250611474915050565b60008181526002602052604090205490915073ffffffffffffffffffffffffffffffffffffffff1615610c3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f63616e6e6f742072652d7265676973746572207468652073616d652070726f7660448201527f696e67206b657900000000000000000000000000000000000000000000000000606482015260840161054d565b60008181526002602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87169081179091558251848152918201527f63c053a28c18ff66ff398bee99746d0480675d15d8d7ee489bcf49217db3c7a29101610641565b67ffffffffffffffff841660009081526001602052604081205473ffffffffffffffffffffffffffffffffffffffff16610d56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c696420737562496400000000000000000000000000000000000000604482015260640161054d565b6000805b67ffffffffffffffff87166000908152600160208190526040909120015461ffff82161015610e235767ffffffffffffffff8716600090815260016020819052604090912001805433919061ffff8416908110610de0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161415610e115760019150610e23565b80610e1b81613c3a565b915050610d5a565b5080610e8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f696e76616c696420636f6e73756d657200000000000000000000000000000000604482015260640161054d565b60008781526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16610f16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6d75737420626520612072656769737465726564206b65790000000000000000604482015260640161054d565b6000878152600460209081526040808320338452909152812054610f3b906001613bba565b60008981526004602090815260408083203380855290835281842085905581519283018d9052908201526060810183905291925090608001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301819052439183019190915260c08a811b7fffffffffffffffff0000000000000000000000000000000000000000000000009081166060808601919091528a831b821660688601529189901b16607084015233901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660788301529150608c01604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020918201206000858152600583528390205583835267ffffffffffffffff808c1691840191909152808a16918301919091528088166060830152861660808201523360a082015289907f0b476163fcf3d5c24697659852f9a64b75f96310f41d1ec14255a7979b2694ec9060c00160405180910390a298975050505050505050565b60005a90506000806000806110f386611a77565b93509350935093506000816040015167ffffffffffffffff1667ffffffffffffffff81111561114b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611174578160200160208202803683370190505b50905060005b826040015167ffffffffffffffff168110156112135760408051602081018690529081018290526060016040516020818303038152906040528051906020012060001c8282815181106111f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101528061120b81613c5c565b91505061117a565b50600084815260056020908152604082209190915582015167ffffffffffffffff165a1161129d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f6e6f7420656e6f7567682067617320666f7220636f6e73756d65720000000000604482015260640161054d565b60007f59e83813d002db2f8acf1e5d18bf70f1515bbf0054df21ee430e8383cc202dbe85836040516024016112d3929190613a4f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000836060015173ffffffffffffffffffffffffffffffffffffffff168260405161135d919061394b565b6000604051808303816000865af19150503d806000811461139a576040519150601f19603f3d011682016040523d82523d6000602084013e61139f565b606091505b5050905060006113b189612710611e8b565b855167ffffffffffffffff166000908152600160205260408120600201805492935083929091906113e3908490613c23565b909155505060008881526002602090815260408083205473ffffffffffffffffffffffffffffffffffffffff168352600390915281208054839290611429908490613bba565b90915550506040517ff45ee76115b0ed5f4ebe293254449fbe612bad36a53d52b87b6a40687adc48de906114609089908790613a4f565b60405180910390a150505050505050505050565b6000816040516020016114879190613939565b604051602081830303815290604052805190602001209050919050565b67ffffffffffffffff821660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1661153a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f737562494420646f65736e742065786973740000000000000000000000000000604482015260640161054d565b67ffffffffffffffff821660009081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1633146115d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f6f6e6c7920737562736372697074696f6e206f776e65722063616e2066756e64604482015260640161054d565b67ffffffffffffffff821660009081526001602052604081206002018054918391906115fe8385613bba565b90915550506040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd90606401602060405180830381600087803b15801561169757600080fd5b505af11580156116ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cf9190613666565b5067ffffffffffffffff8316600081815260016020908152604091829020600201548251938452908301849052908201527fbd2ec7627f501ac185d8663891030c3b0a62394a0f779bc6f5c391ec4e36c8fa90606001610641565b60005473ffffffffffffffffffffffffffffffffffffffff1633146117ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054d565b6117b481611ee4565b50565b336000908152600360205260409020546117d2908290613c23565b336000908152600360205260409081902091909155517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561187557600080fd5b505af1158015611889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ad9190613666565b6118e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b5050565b60065481516201000090910461ffff16101561195c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f61626f7665206d617820636f6e73756d65727320706572207375620000000000604482015260640161054d565b60005b81518110156118e057600073ffffffffffffffffffffffffffffffffffffffff168282815181106119b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611a65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f636f6e73756d65722061646472657373206d757374206e6f74206265207a657260448201527f6f00000000000000000000000000000000000000000000000000000000000000606482015260840161054d565b80611a6f81613c5c565b91505061195f565b6040805160808101825260008082526020820181905291810182905260608101829052819081906000611aad6101a06020613bba565b9050611abc6101a060a0613bba565b865114611b25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f77726f6e672070726f6f66206c656e6774680000000000000000000000000000604482015260640161054d565b611b2d6132df565b5060e086015181870180516020828101518652604080840151878301526060840151908701526080909201519189019291611b6784611474565b600084815260056020526040902054909950929750879280611be5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6e6f20636f72726573706f6e64696e6720726571756573740000000000000000604482015260640161054d565b86516020808901516040808b015181519384018e905290830187905260c093841b7fffffffffffffffff00000000000000000000000000000000000000000000000090811660608086019190915292851b81166068850152931b90921660708201529083901b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166078820152608c01604051602081830303815290604052805190602001208114611cf3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f696e636f727265637420636f6d6d69746d656e74000000000000000000000000604482015260640161054d565b73ffffffffffffffffffffffffffffffffffffffff82166060880152824080611e3d576040517fe9413d38000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e9413d389060240160206040518083038186803b158015611d9c57600080fd5b505afa158015611db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd4919061369e565b905080611e3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f706c656173652070726f766520626c6f636b6861736800000000000000000000604482015260640161054d565b6040805160208082018890528183018490528251808303840181526060909201909252805191012060e08d018190526101a08d52611e7a8d612014565b995050505050505050509193509193565b6000806000611e9861214a565b9092509050805a611ea98787613bba565b611eb39190613c23565b611ec584670de0b6b3a7640000613be6565b611ecf9190613be6565b611ed99190613bd2565b925050505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116611f87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161054d565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006101a0825114612082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f77726f6e672070726f6f66206c656e6774680000000000000000000000000000604482015260640161054d565b61208a6132df565b6120926132df565b61209a6132fd565b60006120a46132df565b6120ac6132df565b6000888060200190518101906120c2919061359b565b845160208601516040870151989f50969d50949b50929950909750955093506120f3928a928a92918989898961231b565b600386604051602001612107929190613a17565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209998505050505050505050565b6000806000600660049054906101000a900463ffffffff1690506000808263ffffffff1611905060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156121dc57600080fd5b505afa1580156121f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612214919061387d565b509550909350859150508015612238575061222f8342613c23565b8563ffffffff16105b156122435760075491505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156122a957600080fd5b505afa1580156122bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e1919061387d565b50955090925085915050801561230557506122fc8342613c23565b8563ffffffff16105b1561230f57506008545b90969095509350505050565b612324896125f2565b61238a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7075626c6963206b6579206973206e6f74206f6e206375727665000000000000604482015260640161054d565b612393886125f2565b6123f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f67616d6d61206973206e6f74206f6e2063757276650000000000000000000000604482015260640161054d565b612402836125f2565b612468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6347616d6d615769746e657373206973206e6f74206f6e206375727665000000604482015260640161054d565b612471826125f2565b6124d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f73486173685769746e657373206973206e6f74206f6e20637572766500000000604482015260640161054d565b6124e3878a8887612636565b612549576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6164647228632a706b2b732a6729213d5f755769746e65737300000000000000604482015260640161054d565b60006125558a8761280a565b90506000612568898b878b86898961286e565b90506000612579838d8d8a86612a51565b9050808a146125e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c69642070726f6f6600000000000000000000000000000000000000604482015260640161054d565b505050505050505050505050565b60208101516000907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f90800961262f8360005b6020020151612aaf565b1492915050565b600073ffffffffffffffffffffffffffffffffffffffff82166126b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f626164207769746e657373000000000000000000000000000000000000000000604482015260640161054d565b60208401516000906126c990600290613caf565b156126d557601c6126d8565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414185876000602002015109612731907ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141613c23565b86519091506000907ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414190890987516040805160008082526020820180845287905260ff88169282019290925260608101929092526080820183905291925060019060a0016020604051602081039080840390855afa1580156127b7573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015173ffffffffffffffffffffffffffffffffffffffff9081169088161495505050505050949350505050565b6128126132df565b61283f6001848460405160200161282b939291906139f6565b604051602081830303815290604052612b07565b90505b61284b816125f2565b611ede578051604080516020810192909252612867910161282b565b9050612842565b6128766132df565b82518651036128a57ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f82613caf565b61290b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f706f696e747320696e2073756d206d7573742062652064697374696e63740000604482015260640161054d565b612916888a89612b82565b6129a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4669727374206d756c7469706c69636174696f6e20636865636b206661696c6560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161054d565b6129ad858786612b82565b612a39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f5365636f6e64206d756c7469706c69636174696f6e20636865636b206661696c60448201527f6564000000000000000000000000000000000000000000000000000000000000606482015260840161054d565b612a44878585612cae565b9998505050505050505050565b600060028686868587604051602001612a6f96959493929190613984565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209695505050505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80848509840990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f600782089392505050565b612b0f6132df565b612b1882612e04565b8152612b2d612b28826000612625565b612e59565b60208201819052612b4090600290613caf565b60011415612b7d576020810151612b77907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f613c23565b60208201525b919050565b600082612b8e57600080fd5b83516020850151600090612ba490600290613caf565b15612bb057601c612bb3565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418387096040805160008082526020820180845281905260ff86169282019290925260608101869052608081018390529192509060019060a0016020604051602081039080840390855afa158015612c33573d6000803e3d6000fd5b5050506020604051035190506000606087604051602001612c549190613939565b60405160208183030381529060405280519060200120901b60601c90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614955050505050509392505050565b612cb66132df565b835160208086015185519186015160009384938493612cd793909190612e93565b919450925090507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f858209600114612d6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f696e765a206d75737420626520696e7665727365206f66207a00000000000000604482015260640161054d565b60405180604001604052807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80612dcb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b87860981526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8785099052979650505050505050565b805160208201205b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8110612b7d57604080516020808201939093528151808203840181529082019091528051910120612e0c565b6000611ede826002612e8c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f6001613bba565b901c613037565b60008080600180827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f612ee68a7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f613c23565b8808905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f612f378c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f613c23565b8a0890506000612f498383858561312b565b9098509050612f5a88828e88613183565b9098509050612f6b88828c87613183565b90985090506000612f7e8d878b85613183565b9098509050612f8f8882868661312b565b9098509050612fa088828e89613183565b9098509050818114613023577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f818a0998507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f82890997507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8183099650613027565b8196505b5050505050509450945094915050565b60008061304261331b565b6020808252818101819052604082015260608101859052608081018490527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f60a082015261308e613339565b60208160c08460057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa925082613121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6269674d6f64457870206661696c757265210000000000000000000000000000604482015260640161054d565b5195945050505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8487097ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8487099097909650945050505050565b600080807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f878509905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f876131fb887ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f613c23565b0990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8183087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f86890990999098509650505050505050565b8280548282559060005260206000209081019282156132cf579160200282015b828111156132cf57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190613275565b506132db929150613357565b5090565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b5b808211156132db5760008155600101613358565b600082601f83011261337c578081fd5b8135602067ffffffffffffffff82111561339857613398613d21565b8160051b6133a7828201613b6b565b8381528281019086840183880185018910156133c1578687fd5b8693505b858410156133ec5780356133d881613d50565b8352600193909301929184019184016133c5565b50979650505050505050565b600082601f830112613408578081fd5b613410613b1f565b808385604086011115613421578384fd5b835b6002811015613442578151845260209384019390910190600101613423565b509095945050505050565b803567ffffffffffffffff81168114612b7d57600080fd5b805169ffffffffffffffffffff81168114612b7d57600080fd5b600060208284031215613490578081fd5b813561349b81613d50565b9392505050565b600080606083850312156134b4578081fd5b82356134bf81613d50565b9150606083018410156134d0578081fd5b50926020919091019150565b600080604083850312156134ee578182fd5b82356134f981613d50565b946020939093013593505050565b600060208284031215613518578081fd5b813567ffffffffffffffff81111561352e578182fd5b61353a8482850161336c565b949350505050565b600060408284031215613553578081fd5b82601f830112613561578081fd5b613569613b1f565b80838560408601111561357a578384fd5b835b600281101561344257813584526020938401939091019060010161357c565b60008060008060008060006101a0888a0312156135b6578283fd5b6135c089896133f8565b96506135cf8960408a016133f8565b955088609f8901126135df578283fd5b6135e7613b48565b8060808a0160e08b018c8111156135fc578687fd5b865b600381101561361d5782518552602094850194909201916001016135fe565b5051919750909150613630905081613d50565b9350613640896101008a016133f8565b9250613650896101408a016133f8565b9150610180880151905092959891949750929550565b600060208284031215613677578081fd5b8151801515811461349b578182fd5b600060208284031215613697578081fd5b5035919050565b6000602082840312156136af578081fd5b5051919050565b600080600080600060a086880312156136cd578283fd5b853594506136dd6020870161344d565b93506136eb6040870161344d565b92506136f96060870161344d565b91506137076080870161344d565b90509295509295909350565b60006020808385031215613725578182fd5b823567ffffffffffffffff8082111561373c578384fd5b818501915085601f83011261374f578384fd5b81358181111561376157613761613d21565b613791847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613b6b565b915080825286848285010111156137a6578485fd5b80848401858401378101909201929092529392505050565b6000602082840312156137cf578081fd5b61349b8261344d565b6000806000606084860312156137ec578081fd5b6137f58461344d565b9250602084013561380581613d50565b929592945050506040919091013590565b60008060408385031215613828578182fd5b6138318361344d565b9150602083013567ffffffffffffffff81111561384c578182fd5b6138588582860161336c565b9150509250929050565b60008060408385031215613874578182fd5b6134f98361344d565b600080600080600060a08688031215613894578283fd5b61389d86613465565b945060208601519350604086015192506060860151915061370760808701613465565b6000815180845260208085019450808401835b8381101561390557815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016138d3565b509495945050505050565b8060005b6002811015613933578151845260209384019390910190600101613914565b50505050565b6139438183613910565b604001919050565b60008251815b8181101561396b5760208186018101518583015201613951565b818111156139795782828501525b509190910192915050565b8681526139946020820187613910565b6139a16060820186613910565b6139ae60a0820185613910565b6139bb60e0820184613910565b60609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166101208201526101340195945050505050565b838152613a066020820184613910565b606081019190915260800192915050565b8281526060810160208083018460005b6002811015613a4457815183529183019190830190600101613a27565b505050509392505050565b60006040820184835260206040818501528185518084526060860191508287019350845b81811015613a8f57845183529383019391830191600101613a73565b5090979650505050505050565b63ffffffff8416815273ffffffffffffffffffffffffffffffffffffffff83166020820152606060408201526000613ad760608301846138c0565b95945050505050565b67ffffffffffffffff84168152606060208201526000613b0360608301856138c0565b8281036040840152613b1581856138c0565b9695505050505050565b6040805190810167ffffffffffffffff81118282101715613b4257613b42613d21565b60405290565b6040516060810167ffffffffffffffff81118282101715613b4257613b42613d21565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613bb257613bb2613d21565b604052919050565b60008219821115613bcd57613bcd613cc3565b500190565b600082613be157613be1613cf2565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613c1e57613c1e613cc3565b500290565b600082821015613c3557613c35613cc3565b500390565b600061ffff80831681811415613c5257613c52613cc3565b6001019392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613c8e57613c8e613cc3565b5060010190565b600063ffffffff80831681811415613c5257613c52613cc3565b600082613cbe57613cbe613cf2565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146117b457600080fdfea164736f6c6343000804000a"

func DeployVRFCoordinatorV2(auth *bind.TransactOpts, backend bind.ContractBackend, link common.Address, blockHashStore common.Address, linkEthFeed common.Address, fastGasFeed common.Address) (common.Address, *types.Transaction, *VRFCoordinatorV2, error) {
	parsed, err := abi.JSON(strings.NewReader(VRFCoordinatorV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VRFCoordinatorV2Bin), backend, link, blockHashStore, linkEthFeed, fastGasFeed)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VRFCoordinatorV2{VRFCoordinatorV2Caller: VRFCoordinatorV2Caller{contract: contract}, VRFCoordinatorV2Transactor: VRFCoordinatorV2Transactor{contract: contract}, VRFCoordinatorV2Filterer: VRFCoordinatorV2Filterer{contract: contract}}, nil
}

type VRFCoordinatorV2 struct {
	address common.Address
	abi     abi.ABI
	VRFCoordinatorV2Caller
	VRFCoordinatorV2Transactor
	VRFCoordinatorV2Filterer
}

type VRFCoordinatorV2Caller struct {
	contract *bind.BoundContract
}

type VRFCoordinatorV2Transactor struct {
	contract *bind.BoundContract
}

type VRFCoordinatorV2Filterer struct {
	contract *bind.BoundContract
}

type VRFCoordinatorV2Session struct {
	Contract     *VRFCoordinatorV2
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type VRFCoordinatorV2CallerSession struct {
	Contract *VRFCoordinatorV2Caller
	CallOpts bind.CallOpts
}

type VRFCoordinatorV2TransactorSession struct {
	Contract     *VRFCoordinatorV2Transactor
	TransactOpts bind.TransactOpts
}

type VRFCoordinatorV2Raw struct {
	Contract *VRFCoordinatorV2
}

type VRFCoordinatorV2CallerRaw struct {
	Contract *VRFCoordinatorV2Caller
}

type VRFCoordinatorV2TransactorRaw struct {
	Contract *VRFCoordinatorV2Transactor
}

func NewVRFCoordinatorV2(address common.Address, backend bind.ContractBackend) (*VRFCoordinatorV2, error) {
	abi, err := abi.JSON(strings.NewReader(VRFCoordinatorV2ABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindVRFCoordinatorV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2{address: address, abi: abi, VRFCoordinatorV2Caller: VRFCoordinatorV2Caller{contract: contract}, VRFCoordinatorV2Transactor: VRFCoordinatorV2Transactor{contract: contract}, VRFCoordinatorV2Filterer: VRFCoordinatorV2Filterer{contract: contract}}, nil
}

func NewVRFCoordinatorV2Caller(address common.Address, caller bind.ContractCaller) (*VRFCoordinatorV2Caller, error) {
	contract, err := bindVRFCoordinatorV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2Caller{contract: contract}, nil
}

func NewVRFCoordinatorV2Transactor(address common.Address, transactor bind.ContractTransactor) (*VRFCoordinatorV2Transactor, error) {
	contract, err := bindVRFCoordinatorV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2Transactor{contract: contract}, nil
}

func NewVRFCoordinatorV2Filterer(address common.Address, filterer bind.ContractFilterer) (*VRFCoordinatorV2Filterer, error) {
	contract, err := bindVRFCoordinatorV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2Filterer{contract: contract}, nil
}

func bindVRFCoordinatorV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VRFCoordinatorV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VRFCoordinatorV2.Contract.VRFCoordinatorV2Caller.contract.Call(opts, result, method, params...)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.VRFCoordinatorV2Transactor.contract.Transfer(opts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.VRFCoordinatorV2Transactor.contract.Transact(opts, method, params...)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VRFCoordinatorV2.Contract.contract.Call(opts, result, method, params...)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.contract.Transfer(opts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.contract.Transact(opts, method, params...)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) BLOCKHASHSTORE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "BLOCKHASH_STORE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) BLOCKHASHSTORE() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.BLOCKHASHSTORE(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) BLOCKHASHSTORE() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.BLOCKHASHSTORE(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) FASTGASFEED(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "FAST_GAS_FEED")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) FASTGASFEED() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.FASTGASFEED(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) FASTGASFEED() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.FASTGASFEED(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) GASBUFFER(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "GAS_BUFFER")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) GASBUFFER() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.GASBUFFER(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) GASBUFFER() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.GASBUFFER(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) LINK(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "LINK")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) LINK() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.LINK(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) LINK() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.LINK(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) LINKETHFEED(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "LINK_ETH_FEED")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) LINKETHFEED() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.LINKETHFEED(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) LINKETHFEED() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.LINKETHFEED(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) PRESEEDOFFSET(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "PRESEED_OFFSET")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) PRESEEDOFFSET() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PRESEEDOFFSET(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) PRESEEDOFFSET() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PRESEEDOFFSET(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) PROOFLENGTH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "PROOF_LENGTH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) PROOFLENGTH() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PROOFLENGTH(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) PROOFLENGTH() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PROOFLENGTH(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) PUBLICKEYOFFSET(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "PUBLIC_KEY_OFFSET")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) PUBLICKEYOFFSET() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PUBLICKEYOFFSET(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) PUBLICKEYOFFSET() (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.PUBLICKEYOFFSET(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) HashOfKey(opts *bind.CallOpts, _publicKey [2]*big.Int) ([32]byte, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "hashOfKey", _publicKey)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) HashOfKey(_publicKey [2]*big.Int) ([32]byte, error) {
	return _VRFCoordinatorV2.Contract.HashOfKey(&_VRFCoordinatorV2.CallOpts, _publicKey)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) HashOfKey(_publicKey [2]*big.Int) ([32]byte, error) {
	return _VRFCoordinatorV2.Contract.HashOfKey(&_VRFCoordinatorV2.CallOpts, _publicKey)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "isOwner")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) IsOwner() (bool, error) {
	return _VRFCoordinatorV2.Contract.IsOwner(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) IsOwner() (bool, error) {
	return _VRFCoordinatorV2.Contract.IsOwner(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) Owner() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.Owner(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) Owner() (common.Address, error) {
	return _VRFCoordinatorV2.Contract.Owner(&_VRFCoordinatorV2.CallOpts)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) SCallbacks2(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "s_callbacks2", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) SCallbacks2(arg0 *big.Int) ([32]byte, error) {
	return _VRFCoordinatorV2.Contract.SCallbacks2(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) SCallbacks2(arg0 *big.Int) ([32]byte, error) {
	return _VRFCoordinatorV2.Contract.SCallbacks2(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) SServiceAgreements(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "s_serviceAgreements", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) SServiceAgreements(arg0 [32]byte) (common.Address, error) {
	return _VRFCoordinatorV2.Contract.SServiceAgreements(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) SServiceAgreements(arg0 [32]byte) (common.Address, error) {
	return _VRFCoordinatorV2.Contract.SServiceAgreements(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) SSubscriptions(opts *bind.CallOpts, arg0 uint64) (SSubscriptions,

	error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "s_subscriptions", arg0)

	outstruct := new(SSubscriptions)
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Balance = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) SSubscriptions(arg0 uint64) (SSubscriptions,

	error) {
	return _VRFCoordinatorV2.Contract.SSubscriptions(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) SSubscriptions(arg0 uint64) (SSubscriptions,

	error) {
	return _VRFCoordinatorV2.Contract.SSubscriptions(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Caller) SWithdrawableTokens(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _VRFCoordinatorV2.contract.Call(opts, &out, "s_withdrawableTokens", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) SWithdrawableTokens(arg0 common.Address) (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.SWithdrawableTokens(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2CallerSession) SWithdrawableTokens(arg0 common.Address) (*big.Int, error) {
	return _VRFCoordinatorV2.Contract.SWithdrawableTokens(&_VRFCoordinatorV2.CallOpts, arg0)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) CreateSubscription(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "createSubscription", consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) CreateSubscription(consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.CreateSubscription(&_VRFCoordinatorV2.TransactOpts, consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) CreateSubscription(consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.CreateSubscription(&_VRFCoordinatorV2.TransactOpts, consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) FulfillRandomWords(opts *bind.TransactOpts, _proof []byte) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "fulfillRandomWords", _proof)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) FulfillRandomWords(_proof []byte) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.FulfillRandomWords(&_VRFCoordinatorV2.TransactOpts, _proof)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) FulfillRandomWords(_proof []byte) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.FulfillRandomWords(&_VRFCoordinatorV2.TransactOpts, _proof)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) FundSubscription(opts *bind.TransactOpts, subId uint64, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "fundSubscription", subId, amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) FundSubscription(subId uint64, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.FundSubscription(&_VRFCoordinatorV2.TransactOpts, subId, amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) FundSubscription(subId uint64, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.FundSubscription(&_VRFCoordinatorV2.TransactOpts, subId, amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) RegisterProvingKey(opts *bind.TransactOpts, oracle common.Address, publicProvingKey [2]*big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "registerProvingKey", oracle, publicProvingKey)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) RegisterProvingKey(oracle common.Address, publicProvingKey [2]*big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.RegisterProvingKey(&_VRFCoordinatorV2.TransactOpts, oracle, publicProvingKey)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) RegisterProvingKey(oracle common.Address, publicProvingKey [2]*big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.RegisterProvingKey(&_VRFCoordinatorV2.TransactOpts, oracle, publicProvingKey)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) RequestRandomWords(opts *bind.TransactOpts, keyHash [32]byte, subId uint64, minimumRequestConfirmations uint64, callbackGasLimit uint64, numWords uint64) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "requestRandomWords", keyHash, subId, minimumRequestConfirmations, callbackGasLimit, numWords)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) RequestRandomWords(keyHash [32]byte, subId uint64, minimumRequestConfirmations uint64, callbackGasLimit uint64, numWords uint64) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.RequestRandomWords(&_VRFCoordinatorV2.TransactOpts, keyHash, subId, minimumRequestConfirmations, callbackGasLimit, numWords)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) RequestRandomWords(keyHash [32]byte, subId uint64, minimumRequestConfirmations uint64, callbackGasLimit uint64, numWords uint64) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.RequestRandomWords(&_VRFCoordinatorV2.TransactOpts, keyHash, subId, minimumRequestConfirmations, callbackGasLimit, numWords)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "transferOwnership", newOwner)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.TransferOwnership(&_VRFCoordinatorV2.TransactOpts, newOwner)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.TransferOwnership(&_VRFCoordinatorV2.TransactOpts, newOwner)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) UpdateSubscription(opts *bind.TransactOpts, subId uint64, consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "updateSubscription", subId, consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) UpdateSubscription(subId uint64, consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.UpdateSubscription(&_VRFCoordinatorV2.TransactOpts, subId, consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) UpdateSubscription(subId uint64, consumers []common.Address) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.UpdateSubscription(&_VRFCoordinatorV2.TransactOpts, subId, consumers)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) Withdraw(opts *bind.TransactOpts, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "withdraw", _recipient, _amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) Withdraw(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.Withdraw(&_VRFCoordinatorV2.TransactOpts, _recipient, _amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) Withdraw(_recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.Withdraw(&_VRFCoordinatorV2.TransactOpts, _recipient, _amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Transactor) WithdrawFromSubscription(opts *bind.TransactOpts, subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.contract.Transact(opts, "withdrawFromSubscription", subId, to, amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Session) WithdrawFromSubscription(subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.WithdrawFromSubscription(&_VRFCoordinatorV2.TransactOpts, subId, to, amount)
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2TransactorSession) WithdrawFromSubscription(subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _VRFCoordinatorV2.Contract.WithdrawFromSubscription(&_VRFCoordinatorV2.TransactOpts, subId, to, amount)
}

type VRFCoordinatorV2NewServiceAgreementIterator struct {
	Event *VRFCoordinatorV2NewServiceAgreement

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2NewServiceAgreementIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2NewServiceAgreement)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2NewServiceAgreement)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2NewServiceAgreementIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2NewServiceAgreementIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2NewServiceAgreement struct {
	KeyHash [32]byte
	Oracle  common.Address
	Raw     types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterNewServiceAgreement(opts *bind.FilterOpts) (*VRFCoordinatorV2NewServiceAgreementIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "NewServiceAgreement")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2NewServiceAgreementIterator{contract: _VRFCoordinatorV2.contract, event: "NewServiceAgreement", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchNewServiceAgreement(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2NewServiceAgreement) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "NewServiceAgreement")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2NewServiceAgreement)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "NewServiceAgreement", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseNewServiceAgreement(log types.Log) (*VRFCoordinatorV2NewServiceAgreement, error) {
	event := new(VRFCoordinatorV2NewServiceAgreement)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "NewServiceAgreement", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2OwnershipTransferredIterator struct {
	Event *VRFCoordinatorV2OwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2OwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2OwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*VRFCoordinatorV2OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2OwnershipTransferredIterator{contract: _VRFCoordinatorV2.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2OwnershipTransferred)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseOwnershipTransferred(log types.Log) (*VRFCoordinatorV2OwnershipTransferred, error) {
	event := new(VRFCoordinatorV2OwnershipTransferred)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2RandomWordsFulfilledIterator struct {
	Event *VRFCoordinatorV2RandomWordsFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2RandomWordsFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2RandomWordsFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2RandomWordsFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2RandomWordsFulfilledIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2RandomWordsFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2RandomWordsFulfilled struct {
	RequestId *big.Int
	Output    []*big.Int
	Raw       types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*VRFCoordinatorV2RandomWordsFulfilledIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2RandomWordsFulfilledIterator{contract: _VRFCoordinatorV2.contract, event: "RandomWordsFulfilled", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2RandomWordsFulfilled) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "RandomWordsFulfilled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2RandomWordsFulfilled)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseRandomWordsFulfilled(log types.Log) (*VRFCoordinatorV2RandomWordsFulfilled, error) {
	event := new(VRFCoordinatorV2RandomWordsFulfilled)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2RandomWordsRequestedIterator struct {
	Event *VRFCoordinatorV2RandomWordsRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2RandomWordsRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2RandomWordsRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2RandomWordsRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2RandomWordsRequestedIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2RandomWordsRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2RandomWordsRequested struct {
	KeyHash                     [32]byte
	PreSeed                     *big.Int
	SubId                       uint64
	MinimumRequestConfirmations uint64
	CallbackGasLimit            uint64
	NumWords                    uint64
	Sender                      common.Address
	Raw                         types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterRandomWordsRequested(opts *bind.FilterOpts, keyHash [][32]byte) (*VRFCoordinatorV2RandomWordsRequestedIterator, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "RandomWordsRequested", keyHashRule)
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2RandomWordsRequestedIterator{contract: _VRFCoordinatorV2.contract, event: "RandomWordsRequested", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchRandomWordsRequested(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2RandomWordsRequested, keyHash [][32]byte) (event.Subscription, error) {

	var keyHashRule []interface{}
	for _, keyHashItem := range keyHash {
		keyHashRule = append(keyHashRule, keyHashItem)
	}

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "RandomWordsRequested", keyHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2RandomWordsRequested)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseRandomWordsRequested(log types.Log) (*VRFCoordinatorV2RandomWordsRequested, error) {
	event := new(VRFCoordinatorV2RandomWordsRequested)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "RandomWordsRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2SubscriptionCanceledIterator struct {
	Event *VRFCoordinatorV2SubscriptionCanceled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2SubscriptionCanceledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2SubscriptionCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2SubscriptionCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2SubscriptionCanceledIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2SubscriptionCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2SubscriptionCanceled struct {
	SubId uint64
	Raw   types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterSubscriptionCanceled(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionCanceledIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionCanceled")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2SubscriptionCanceledIterator{contract: _VRFCoordinatorV2.contract, event: "SubscriptionCanceled", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionCanceled) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionCanceled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2SubscriptionCanceled)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseSubscriptionCanceled(log types.Log) (*VRFCoordinatorV2SubscriptionCanceled, error) {
	event := new(VRFCoordinatorV2SubscriptionCanceled)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2SubscriptionConsumersUpdatedIterator struct {
	Event *VRFCoordinatorV2SubscriptionConsumersUpdated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2SubscriptionConsumersUpdatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2SubscriptionConsumersUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2SubscriptionConsumersUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2SubscriptionConsumersUpdatedIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2SubscriptionConsumersUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2SubscriptionConsumersUpdated struct {
	SubId        uint64
	OldConsumers []common.Address
	NewConsumers []common.Address
	Raw          types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterSubscriptionConsumersUpdated(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionConsumersUpdatedIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionConsumersUpdated")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2SubscriptionConsumersUpdatedIterator{contract: _VRFCoordinatorV2.contract, event: "SubscriptionConsumersUpdated", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchSubscriptionConsumersUpdated(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionConsumersUpdated) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionConsumersUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2SubscriptionConsumersUpdated)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumersUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseSubscriptionConsumersUpdated(log types.Log) (*VRFCoordinatorV2SubscriptionConsumersUpdated, error) {
	event := new(VRFCoordinatorV2SubscriptionConsumersUpdated)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionConsumersUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2SubscriptionCreatedIterator struct {
	Event *VRFCoordinatorV2SubscriptionCreated

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2SubscriptionCreatedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2SubscriptionCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2SubscriptionCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2SubscriptionCreatedIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2SubscriptionCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2SubscriptionCreated struct {
	SubId     uint64
	Owner     common.Address
	Consumers []common.Address
	Raw       types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterSubscriptionCreated(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionCreatedIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionCreated")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2SubscriptionCreatedIterator{contract: _VRFCoordinatorV2.contract, event: "SubscriptionCreated", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionCreated) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2SubscriptionCreated)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseSubscriptionCreated(log types.Log) (*VRFCoordinatorV2SubscriptionCreated, error) {
	event := new(VRFCoordinatorV2SubscriptionCreated)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2SubscriptionFundsAddedIterator struct {
	Event *VRFCoordinatorV2SubscriptionFundsAdded

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2SubscriptionFundsAddedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2SubscriptionFundsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2SubscriptionFundsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2SubscriptionFundsAddedIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2SubscriptionFundsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2SubscriptionFundsAdded struct {
	SubId      uint64
	OldBalance *big.Int
	NewBalance *big.Int
	Raw        types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterSubscriptionFundsAdded(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionFundsAddedIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionFundsAdded")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2SubscriptionFundsAddedIterator{contract: _VRFCoordinatorV2.contract, event: "SubscriptionFundsAdded", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchSubscriptionFundsAdded(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionFundsAdded) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionFundsAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2SubscriptionFundsAdded)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFundsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseSubscriptionFundsAdded(log types.Log) (*VRFCoordinatorV2SubscriptionFundsAdded, error) {
	event := new(VRFCoordinatorV2SubscriptionFundsAdded)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFundsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2SubscriptionFundsWithdrawnIterator struct {
	Event *VRFCoordinatorV2SubscriptionFundsWithdrawn

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2SubscriptionFundsWithdrawnIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2SubscriptionFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2SubscriptionFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2SubscriptionFundsWithdrawnIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2SubscriptionFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2SubscriptionFundsWithdrawn struct {
	SubId      uint64
	OldBalance *big.Int
	NewBalance *big.Int
	Raw        types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterSubscriptionFundsWithdrawn(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionFundsWithdrawnIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "SubscriptionFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2SubscriptionFundsWithdrawnIterator{contract: _VRFCoordinatorV2.contract, event: "SubscriptionFundsWithdrawn", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchSubscriptionFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionFundsWithdrawn) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "SubscriptionFundsWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2SubscriptionFundsWithdrawn)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseSubscriptionFundsWithdrawn(log types.Log) (*VRFCoordinatorV2SubscriptionFundsWithdrawn, error) {
	event := new(VRFCoordinatorV2SubscriptionFundsWithdrawn)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "SubscriptionFundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFCoordinatorV2TestLogIterator struct {
	Event *VRFCoordinatorV2TestLog

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFCoordinatorV2TestLogIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFCoordinatorV2TestLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFCoordinatorV2TestLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFCoordinatorV2TestLogIterator) Error() error {
	return it.fail
}

func (it *VRFCoordinatorV2TestLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFCoordinatorV2TestLog struct {
	A   uint64
	B   uint64
	C   uint64
	S   common.Address
	Raw types.Log
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) FilterTestLog(opts *bind.FilterOpts) (*VRFCoordinatorV2TestLogIterator, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.FilterLogs(opts, "TestLog")
	if err != nil {
		return nil, err
	}
	return &VRFCoordinatorV2TestLogIterator{contract: _VRFCoordinatorV2.contract, event: "TestLog", logs: logs, sub: sub}, nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) WatchTestLog(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2TestLog) (event.Subscription, error) {

	logs, sub, err := _VRFCoordinatorV2.contract.WatchLogs(opts, "TestLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFCoordinatorV2TestLog)
				if err := _VRFCoordinatorV2.contract.UnpackLog(event, "TestLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2Filterer) ParseTestLog(log types.Log) (*VRFCoordinatorV2TestLog, error) {
	event := new(VRFCoordinatorV2TestLog)
	if err := _VRFCoordinatorV2.contract.UnpackLog(event, "TestLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type SSubscriptions struct {
	Owner   common.Address
	Balance *big.Int
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _VRFCoordinatorV2.abi.Events["NewServiceAgreement"].ID:
		return _VRFCoordinatorV2.ParseNewServiceAgreement(log)
	case _VRFCoordinatorV2.abi.Events["OwnershipTransferred"].ID:
		return _VRFCoordinatorV2.ParseOwnershipTransferred(log)
	case _VRFCoordinatorV2.abi.Events["RandomWordsFulfilled"].ID:
		return _VRFCoordinatorV2.ParseRandomWordsFulfilled(log)
	case _VRFCoordinatorV2.abi.Events["RandomWordsRequested"].ID:
		return _VRFCoordinatorV2.ParseRandomWordsRequested(log)
	case _VRFCoordinatorV2.abi.Events["SubscriptionCanceled"].ID:
		return _VRFCoordinatorV2.ParseSubscriptionCanceled(log)
	case _VRFCoordinatorV2.abi.Events["SubscriptionConsumersUpdated"].ID:
		return _VRFCoordinatorV2.ParseSubscriptionConsumersUpdated(log)
	case _VRFCoordinatorV2.abi.Events["SubscriptionCreated"].ID:
		return _VRFCoordinatorV2.ParseSubscriptionCreated(log)
	case _VRFCoordinatorV2.abi.Events["SubscriptionFundsAdded"].ID:
		return _VRFCoordinatorV2.ParseSubscriptionFundsAdded(log)
	case _VRFCoordinatorV2.abi.Events["SubscriptionFundsWithdrawn"].ID:
		return _VRFCoordinatorV2.ParseSubscriptionFundsWithdrawn(log)
	case _VRFCoordinatorV2.abi.Events["TestLog"].ID:
		return _VRFCoordinatorV2.ParseTestLog(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (VRFCoordinatorV2NewServiceAgreement) Topic() common.Hash {
	return common.HexToHash("0x63c053a28c18ff66ff398bee99746d0480675d15d8d7ee489bcf49217db3c7a2")
}

func (VRFCoordinatorV2OwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (VRFCoordinatorV2RandomWordsFulfilled) Topic() common.Hash {
	return common.HexToHash("0xf45ee76115b0ed5f4ebe293254449fbe612bad36a53d52b87b6a40687adc48de")
}

func (VRFCoordinatorV2RandomWordsRequested) Topic() common.Hash {
	return common.HexToHash("0x0b476163fcf3d5c24697659852f9a64b75f96310f41d1ec14255a7979b2694ec")
}

func (VRFCoordinatorV2SubscriptionCanceled) Topic() common.Hash {
	return common.HexToHash("0x466fdd77e3868bb22a3a96e65f21041eedf27238eebde51eef0b19eca56a597c")
}

func (VRFCoordinatorV2SubscriptionConsumersUpdated) Topic() common.Hash {
	return common.HexToHash("0x39c69cf33be9b805bfad67e04ec752825baee3e53bde1d72598cdd3163d05f7c")
}

func (VRFCoordinatorV2SubscriptionCreated) Topic() common.Hash {
	return common.HexToHash("0xee2c521bbf51f9409a7f8f78efc00452e94cd2cfb510a4cba04d9e21cb0ad29f")
}

func (VRFCoordinatorV2SubscriptionFundsAdded) Topic() common.Hash {
	return common.HexToHash("0xbd2ec7627f501ac185d8663891030c3b0a62394a0f779bc6f5c391ec4e36c8fa")
}

func (VRFCoordinatorV2SubscriptionFundsWithdrawn) Topic() common.Hash {
	return common.HexToHash("0xe335bd1d43104a2151d991ea082e1c5edf621ffe727cc629fef25af0b358818a")
}

func (VRFCoordinatorV2TestLog) Topic() common.Hash {
	return common.HexToHash("0x65613f44266faf989155557adf32903b0a9e45d59ac6182fa448c06b5d73856d")
}

func (_VRFCoordinatorV2 *VRFCoordinatorV2) Address() common.Address {
	return _VRFCoordinatorV2.address
}

type VRFCoordinatorV2Interface interface {
	BLOCKHASHSTORE(opts *bind.CallOpts) (common.Address, error)

	FASTGASFEED(opts *bind.CallOpts) (common.Address, error)

	GASBUFFER(opts *bind.CallOpts) (*big.Int, error)

	LINK(opts *bind.CallOpts) (common.Address, error)

	LINKETHFEED(opts *bind.CallOpts) (common.Address, error)

	PRESEEDOFFSET(opts *bind.CallOpts) (*big.Int, error)

	PROOFLENGTH(opts *bind.CallOpts) (*big.Int, error)

	PUBLICKEYOFFSET(opts *bind.CallOpts) (*big.Int, error)

	HashOfKey(opts *bind.CallOpts, _publicKey [2]*big.Int) ([32]byte, error)

	IsOwner(opts *bind.CallOpts) (bool, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SCallbacks2(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error)

	SServiceAgreements(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error)

	SSubscriptions(opts *bind.CallOpts, arg0 uint64) (SSubscriptions,

		error)

	SWithdrawableTokens(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error)

	CreateSubscription(opts *bind.TransactOpts, consumers []common.Address) (*types.Transaction, error)

	FulfillRandomWords(opts *bind.TransactOpts, _proof []byte) (*types.Transaction, error)

	FundSubscription(opts *bind.TransactOpts, subId uint64, amount *big.Int) (*types.Transaction, error)

	RegisterProvingKey(opts *bind.TransactOpts, oracle common.Address, publicProvingKey [2]*big.Int) (*types.Transaction, error)

	RequestRandomWords(opts *bind.TransactOpts, keyHash [32]byte, subId uint64, minimumRequestConfirmations uint64, callbackGasLimit uint64, numWords uint64) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	UpdateSubscription(opts *bind.TransactOpts, subId uint64, consumers []common.Address) (*types.Transaction, error)

	Withdraw(opts *bind.TransactOpts, _recipient common.Address, _amount *big.Int) (*types.Transaction, error)

	WithdrawFromSubscription(opts *bind.TransactOpts, subId uint64, to common.Address, amount *big.Int) (*types.Transaction, error)

	FilterNewServiceAgreement(opts *bind.FilterOpts) (*VRFCoordinatorV2NewServiceAgreementIterator, error)

	WatchNewServiceAgreement(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2NewServiceAgreement) (event.Subscription, error)

	ParseNewServiceAgreement(log types.Log) (*VRFCoordinatorV2NewServiceAgreement, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*VRFCoordinatorV2OwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*VRFCoordinatorV2OwnershipTransferred, error)

	FilterRandomWordsFulfilled(opts *bind.FilterOpts) (*VRFCoordinatorV2RandomWordsFulfilledIterator, error)

	WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2RandomWordsFulfilled) (event.Subscription, error)

	ParseRandomWordsFulfilled(log types.Log) (*VRFCoordinatorV2RandomWordsFulfilled, error)

	FilterRandomWordsRequested(opts *bind.FilterOpts, keyHash [][32]byte) (*VRFCoordinatorV2RandomWordsRequestedIterator, error)

	WatchRandomWordsRequested(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2RandomWordsRequested, keyHash [][32]byte) (event.Subscription, error)

	ParseRandomWordsRequested(log types.Log) (*VRFCoordinatorV2RandomWordsRequested, error)

	FilterSubscriptionCanceled(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionCanceledIterator, error)

	WatchSubscriptionCanceled(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionCanceled) (event.Subscription, error)

	ParseSubscriptionCanceled(log types.Log) (*VRFCoordinatorV2SubscriptionCanceled, error)

	FilterSubscriptionConsumersUpdated(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionConsumersUpdatedIterator, error)

	WatchSubscriptionConsumersUpdated(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionConsumersUpdated) (event.Subscription, error)

	ParseSubscriptionConsumersUpdated(log types.Log) (*VRFCoordinatorV2SubscriptionConsumersUpdated, error)

	FilterSubscriptionCreated(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionCreatedIterator, error)

	WatchSubscriptionCreated(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionCreated) (event.Subscription, error)

	ParseSubscriptionCreated(log types.Log) (*VRFCoordinatorV2SubscriptionCreated, error)

	FilterSubscriptionFundsAdded(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionFundsAddedIterator, error)

	WatchSubscriptionFundsAdded(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionFundsAdded) (event.Subscription, error)

	ParseSubscriptionFundsAdded(log types.Log) (*VRFCoordinatorV2SubscriptionFundsAdded, error)

	FilterSubscriptionFundsWithdrawn(opts *bind.FilterOpts) (*VRFCoordinatorV2SubscriptionFundsWithdrawnIterator, error)

	WatchSubscriptionFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2SubscriptionFundsWithdrawn) (event.Subscription, error)

	ParseSubscriptionFundsWithdrawn(log types.Log) (*VRFCoordinatorV2SubscriptionFundsWithdrawn, error)

	FilterTestLog(opts *bind.FilterOpts) (*VRFCoordinatorV2TestLogIterator, error)

	WatchTestLog(opts *bind.WatchOpts, sink chan<- *VRFCoordinatorV2TestLog) (event.Subscription, error)

	ParseTestLog(log types.Log) (*VRFCoordinatorV2TestLog, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
